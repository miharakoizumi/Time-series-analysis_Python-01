{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNtB5EsoMxxtVutQv5WBtFw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/miharakoizumi/Time-series-analysis_Python-01/blob/main/DX%E6%94%B9%E5%96%84_Python_04_%E8%B2%A9%E5%A3%B2%E4%BF%83%E9%80%B2%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%9A%E3%83%BC%E3%83%B3%E3%81%AE%E5%8A%B9%E6%9E%9C%E5%88%86%E6%9E%90.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4. **販売促進キャンペーンの効果分析**\n",
        "   **事例:** 過去のキャンペーンデータを分析し、どのようなプロモーションが効果的だったかを評価します。これにより、今後のキャンペーンの改善に役立てます。\n",
        "   \n",
        "   **カリキュラム内容:**\n",
        "   - **ステップ1:** **キャンペーンデータの収集（売上や客数などのデータ収集）**\n",
        "   - **ステップ2:** **Pythonでの効果分析（どのキャンペーンが最も成功したかを分析）**\n",
        "   - **ステップ3:** **結果の解釈と報告（分析結果をわかりやすく報告書にまとめる）**\n",
        "   - **ステップ4:** **次回キャンペーンの計画（過去のデータを基に、次のキャンペーンを提案)**\n"
      ],
      "metadata": {
        "id": "pvzg-kYyCUuj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "キャンペーンデータの分析をPythonで実施するため、以下の手順に従います。この実装では、提供いただいたデータを用いて効果的なキャンペーンを分析します。"
      ],
      "metadata": {
        "id": "4mN4LJ2cC4Xh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "必要なPythonライブラリのインストールとインポート\n",
        "まず、必要なPythonライブラリをインポートします。"
      ],
      "metadata": {
        "id": "yQRQf9akC8rl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6OAK0WkWCTk2"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 日本語フォント設定\n",
        "from matplotlib import font_manager as fm\n",
        "import matplotlib\n",
        "\n",
        "# フォントを設定\n",
        "font_path = '/content/ipaexg.ttf'  # アップロードされたフォントファイルのパス\n",
        "fontprop = fm.FontProperties(fname=font_path)\n",
        "matplotlib.rcParams['font.family'] = fontprop.get_name()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ステップ1: キャンペーンデータの収集<br>\n",
        "データを読み込みます。"
      ],
      "metadata": {
        "id": "e8xoYvgbHfLS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# データの読み込み\n",
        "file_path = '/content/merged_data.csv'  # アップロードされたデータファイルのパス\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# データの最初の数行を表示して、内容を確認します\n",
        "df.head()\n",
        "#df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "kkQSCX3VHiLs",
        "outputId": "3aad81de-832d-47fb-fd34-a739a48e556a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           日付  店舗ID     商品ID  商品価格  売上個数  商品カテゴリID   商品カテゴリ名\n",
              "0  2018-01-01     6  1000001   420     1       100  映画 - DVD\n",
              "1  2018-01-01     0  1000017   250     1       100  映画 - DVD\n",
              "2  2018-01-01     1  1000017   250     1       100  映画 - DVD\n",
              "3  2018-01-01     1  1000018   250     1       100  映画 - DVD\n",
              "4  2018-01-01     1  1000027   250     1       100  映画 - DVD"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46d39eba-0ec8-4d1e-b68e-dd0aa1ae5ba5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>日付</th>\n",
              "      <th>店舗ID</th>\n",
              "      <th>商品ID</th>\n",
              "      <th>商品価格</th>\n",
              "      <th>売上個数</th>\n",
              "      <th>商品カテゴリID</th>\n",
              "      <th>商品カテゴリ名</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>6</td>\n",
              "      <td>1000001</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000018</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000027</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46d39eba-0ec8-4d1e-b68e-dd0aa1ae5ba5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46d39eba-0ec8-4d1e-b68e-dd0aa1ae5ba5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46d39eba-0ec8-4d1e-b68e-dd0aa1ae5ba5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b6255dbf-b428-465a-8d7e-ef5f29cca29f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b6255dbf-b428-465a-8d7e-ef5f29cca29f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b6255dbf-b428-465a-8d7e-ef5f29cca29f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"#df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"\\u65e5\\u4ed8\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2018-01-01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e97\\u8217ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5546\\u54c1ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 1000001,\n        \"max\": 1000027,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1000017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5546\\u54c1\\u4fa1\\u683c\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 76,\n        \"min\": 250,\n        \"max\": 420,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          250\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\\u500b\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5546\\u54c1\\u30ab\\u30c6\\u30b4\\u30eaID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 100,\n        \"max\": 100,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5546\\u54c1\\u30ab\\u30c6\\u30b4\\u30ea\\u540d\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"\\u6620\\u753b - DVD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# 既存のデータを読み込み\n",
        "file_path = '/content/merged_data.csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# 仮想のキャンペーン名を追加するために、いくつかのキャンペーン名を用意\n",
        "campaign_names = ['Campaign A', 'Campaign B', 'Campaign C', 'Campaign D']\n",
        "\n",
        "# データの長さに基づいて、ランダムにキャンペーン名を付与\n",
        "import numpy as np\n",
        "np.random.seed(42)  # 再現性のためにシードを設定\n",
        "df['campaign_name'] = np.random.choice(campaign_names, size=len(df))\n",
        "\n",
        "# 修正したデータフレームの最初の数行を表示して確認\n",
        "df.head()\n",
        "\n",
        "# 修正したデータを保存\n",
        "modified_file_path = '/content/modified_merged_data.csv'\n",
        "df.to_csv(modified_file_path, index=False)\n",
        "#modified_file_path\n",
        "df_1 = pd.read_csv(modified_file_path)\n",
        "df_1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "collapsed": true,
        "id": "3aF1ltK-Jkho",
        "outputId": "7f0d8ab8-ad51-408e-8239-f1dbdc172dc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 日付  店舗ID     商品ID  商品価格  売上個数  商品カテゴリID            商品カテゴリ名  \\\n",
              "0        2018-01-01     6  1000001   420     1       100           映画 - DVD   \n",
              "1        2018-01-01     0  1000017   250     1       100           映画 - DVD   \n",
              "2        2018-01-01     1  1000017   250     1       100           映画 - DVD   \n",
              "3        2018-01-01     1  1000018   250     1       100           映画 - DVD   \n",
              "4        2018-01-01     1  1000027   250     1       100           映画 - DVD   \n",
              "...             ...   ...      ...   ...   ...       ...                ...   \n",
              "1119565  2019-10-31    13  3200029  1360     1       320    ゲーム周辺機器 - ゲーム機B   \n",
              "1119566  2019-10-31    10  3300001  2040     1       330          音楽 - レコード   \n",
              "1119567  2019-10-31    15  3400002  1440     1       340    ゲーム周辺機器 - ゲーム機A   \n",
              "1119568  2019-10-31    17  3400003  1190     1       340    ゲーム周辺機器 - ゲーム機A   \n",
              "1119569  2019-10-31    13  3500004   420     1       350  本 - オーディオブック_タイプB   \n",
              "\n",
              "        campaign_name  \n",
              "0          Campaign C  \n",
              "1          Campaign D  \n",
              "2          Campaign A  \n",
              "3          Campaign C  \n",
              "4          Campaign C  \n",
              "...               ...  \n",
              "1119565    Campaign B  \n",
              "1119566    Campaign B  \n",
              "1119567    Campaign B  \n",
              "1119568    Campaign C  \n",
              "1119569    Campaign C  \n",
              "\n",
              "[1119570 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9711b308-f3a7-435b-a45b-7f8391befbe1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>日付</th>\n",
              "      <th>店舗ID</th>\n",
              "      <th>商品ID</th>\n",
              "      <th>商品価格</th>\n",
              "      <th>売上個数</th>\n",
              "      <th>商品カテゴリID</th>\n",
              "      <th>商品カテゴリ名</th>\n",
              "      <th>campaign_name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>6</td>\n",
              "      <td>1000001</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000018</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000027</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119565</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>13</td>\n",
              "      <td>3200029</td>\n",
              "      <td>1360</td>\n",
              "      <td>1</td>\n",
              "      <td>320</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機B</td>\n",
              "      <td>Campaign B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119566</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>10</td>\n",
              "      <td>3300001</td>\n",
              "      <td>2040</td>\n",
              "      <td>1</td>\n",
              "      <td>330</td>\n",
              "      <td>音楽 - レコード</td>\n",
              "      <td>Campaign B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119567</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>15</td>\n",
              "      <td>3400002</td>\n",
              "      <td>1440</td>\n",
              "      <td>1</td>\n",
              "      <td>340</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機A</td>\n",
              "      <td>Campaign B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119568</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>17</td>\n",
              "      <td>3400003</td>\n",
              "      <td>1190</td>\n",
              "      <td>1</td>\n",
              "      <td>340</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機A</td>\n",
              "      <td>Campaign C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119569</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>13</td>\n",
              "      <td>3500004</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>350</td>\n",
              "      <td>本 - オーディオブック_タイプB</td>\n",
              "      <td>Campaign C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1119570 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9711b308-f3a7-435b-a45b-7f8391befbe1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9711b308-f3a7-435b-a45b-7f8391befbe1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9711b308-f3a7-435b-a45b-7f8391befbe1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0a5140c2-d83b-42d0-8d37-b1c94349f6e5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a5140c2-d83b-42d0-8d37-b1c94349f6e5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0a5140c2-d83b-42d0-8d37-b1c94349f6e5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7027a847-b056-44d9-8304-0bcace026ee7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7027a847-b056-44d9-8304-0bcace026ee7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_1"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 仮想の顧客数データを追加\n",
        "np.random.seed(42)  # 再現性のためのシード設定\n",
        "df['customers'] = np.random.randint(50, 300, size=len(df))\n",
        "\n",
        "# 修正したデータを保存\n",
        "all_file_path = '/content/all_merged_data.csv'\n",
        "df.to_csv(all_file_path, index=False)\n",
        "\n",
        "df_all = pd.read_csv(all_file_path)\n",
        "\n",
        "df_all\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "collapsed": true,
        "id": "CQB2hqRpNcXb",
        "outputId": "0eed57eb-9548-4d46-c962-2809c109b737"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 日付  店舗ID     商品ID  商品価格  売上個数  商品カテゴリID            商品カテゴリ名  \\\n",
              "0        2018-01-01     6  1000001   420     1       100           映画 - DVD   \n",
              "1        2018-01-01     0  1000017   250     1       100           映画 - DVD   \n",
              "2        2018-01-01     1  1000017   250     1       100           映画 - DVD   \n",
              "3        2018-01-01     1  1000018   250     1       100           映画 - DVD   \n",
              "4        2018-01-01     1  1000027   250     1       100           映画 - DVD   \n",
              "...             ...   ...      ...   ...   ...       ...                ...   \n",
              "1119565  2019-10-31    13  3200029  1360     1       320    ゲーム周辺機器 - ゲーム機B   \n",
              "1119566  2019-10-31    10  3300001  2040     1       330          音楽 - レコード   \n",
              "1119567  2019-10-31    15  3400002  1440     1       340    ゲーム周辺機器 - ゲーム機A   \n",
              "1119568  2019-10-31    17  3400003  1190     1       340    ゲーム周辺機器 - ゲーム機A   \n",
              "1119569  2019-10-31    13  3500004   420     1       350  本 - オーディオブック_タイプB   \n",
              "\n",
              "        campaign_name  customers  \n",
              "0          Campaign C        152  \n",
              "1          Campaign D        229  \n",
              "2          Campaign A        142  \n",
              "3          Campaign C         64  \n",
              "4          Campaign C        156  \n",
              "...               ...        ...  \n",
              "1119565    Campaign B        287  \n",
              "1119566    Campaign B         60  \n",
              "1119567    Campaign B        101  \n",
              "1119568    Campaign C        135  \n",
              "1119569    Campaign C        273  \n",
              "\n",
              "[1119570 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-869a5931-67d3-4be7-847b-37b168f33cdb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>日付</th>\n",
              "      <th>店舗ID</th>\n",
              "      <th>商品ID</th>\n",
              "      <th>商品価格</th>\n",
              "      <th>売上個数</th>\n",
              "      <th>商品カテゴリID</th>\n",
              "      <th>商品カテゴリ名</th>\n",
              "      <th>campaign_name</th>\n",
              "      <th>customers</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>6</td>\n",
              "      <td>1000001</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign D</td>\n",
              "      <td>229</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign A</td>\n",
              "      <td>142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000018</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000027</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119565</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>13</td>\n",
              "      <td>3200029</td>\n",
              "      <td>1360</td>\n",
              "      <td>1</td>\n",
              "      <td>320</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機B</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119566</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>10</td>\n",
              "      <td>3300001</td>\n",
              "      <td>2040</td>\n",
              "      <td>1</td>\n",
              "      <td>330</td>\n",
              "      <td>音楽 - レコード</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119567</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>15</td>\n",
              "      <td>3400002</td>\n",
              "      <td>1440</td>\n",
              "      <td>1</td>\n",
              "      <td>340</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機A</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119568</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>17</td>\n",
              "      <td>3400003</td>\n",
              "      <td>1190</td>\n",
              "      <td>1</td>\n",
              "      <td>340</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機A</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119569</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>13</td>\n",
              "      <td>3500004</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>350</td>\n",
              "      <td>本 - オーディオブック_タイプB</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>273</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1119570 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-869a5931-67d3-4be7-847b-37b168f33cdb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-869a5931-67d3-4be7-847b-37b168f33cdb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-869a5931-67d3-4be7-847b-37b168f33cdb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4e7dfd32-3fb1-432c-aa2d-d4043e4431a4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e7dfd32-3fb1-432c-aa2d-d4043e4431a4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4e7dfd32-3fb1-432c-aa2d-d4043e4431a4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_a443abfd-333c-41c8-bfd5-921cd59d003c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_all')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a443abfd-333c-41c8-bfd5-921cd59d003c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_all');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_all"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ステップ2: Pythonでの効果分析**<br>\n",
        "次に、各キャンペーンの売上や客数に対する効果を分析します。"
      ],
      "metadata": {
        "id": "MMtKFws2H-Sg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 日本語フォント設定\n",
        "from matplotlib import font_manager as fm\n",
        "import matplotlib\n",
        "\n",
        "# 日本語フォントのパスを設定\n",
        "font_path = '/content/ipaexg.ttf'\n",
        "fontprop = fm.FontProperties(fname=font_path)\n",
        "matplotlib.rcParams['font.family'] = fontprop.get_name()\n",
        "\n",
        "# データの読み込み\n",
        "file_path = '/content/all_merged_data.csv'\n",
        "df_all = pd.read_csv(file_path)\n",
        "\n",
        "# キャンペーン別の売上の平均を計算\n",
        "campaign_sales = df_all.groupby('campaign_name')['売上個数'].mean()\n",
        "\n",
        "# キャンペーン別の客数の平均を計算\n",
        "campaign_customers = df_all.groupby('campaign_name')['customers'].mean()\n",
        "\n",
        "# データの可視化\n",
        "plt.figure(figsize=(14, 7))\n",
        "\n",
        "# 売上のグラフ\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.barplot(x=campaign_sales.index, y=campaign_sales.values)\n",
        "plt.title('キャンペーン別平均売上', fontproperties=fontprop)\n",
        "plt.xticks(rotation=45, fontproperties=fontprop)\n",
        "\n",
        "# 客数のグラフ\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.barplot(x=campaign_customers.index, y=campaign_customers.values)\n",
        "plt.title('キャンペーン別平均客数', fontproperties=fontprop)\n",
        "plt.xticks(rotation=45, fontproperties=fontprop)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "F1RxGCMuQB_W",
        "outputId": "f2540148-f0d8-48fa-fdb5-38453e22d10f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n",
            "WARNING:matplotlib.font_manager:findfont: Font family 'IPAexGothic' not found.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ステップ3: 結果の解釈と報告**<br>\n",
        "グラフから最も効果的なキャンペーンを選定し、その結果を報告書にまとめます。"
      ],
      "metadata": {
        "id": "Oh_issQEIipy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 最も成功したキャンペーンの選定\n",
        "best_campaign_sales = campaign_sales.idxmax()\n",
        "best_campaign_customers = campaign_customers.idxmax()\n",
        "\n",
        "print(f'最も売上が高かったキャンペーン: {best_campaign_sales}')\n",
        "print(f'最も客数が多かったキャンペーン: {best_campaign_customers}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ck5kXR4kIlPV",
        "outputId": "a36a2dcc-934c-4191-d753-3bf86c7b4186"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "最も売上が高かったキャンペーン: Campaign C\n",
            "最も客数が多かったキャンペーン: Campaign B\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ステップ4: 次回キャンペーンの計画**<br>\n",
        "過去のデータをもとに、次回のキャンペーンを提案します。<br>**この部分は報告書としてまとめ、具体的な提案内容を記述します。**"
      ],
      "metadata": {
        "id": "-7XI8byoIr2s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 提案内容を文字列で記述\n",
        "recommendation = f\"\"\"\n",
        "次回のキャンペーンとして、過去のデータから「{best_campaign_sales}」が売上において最も効果的であったことがわかりました。\n",
        "また、「{best_campaign_customers}」は最も客数を増やす効果がありました。これらの成功要因を分析し、次回のキャンペーンに反映させることを提案します。\n",
        "\"\"\"\n",
        "print(recommendation)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PT0b0uomIvpX",
        "outputId": "b3c41a23-a926-4729-8637-273f5c06d3a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "次回のキャンペーンとして、過去のデータから「Campaign C」が売上において最も効果的であったことがわかりました。\n",
            "また、「Campaign B」は最も客数を増やす効果がありました。これらの成功要因を分析し、次回のキャンペーンに反映させることを提案します。\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "e-hwL_xtI1fh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_all"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "9_9EO5SXVlAI",
        "outputId": "06c8cc87-7a59-4d14-fecd-6b93137405f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 日付  店舗ID     商品ID  商品価格  売上個数  商品カテゴリID            商品カテゴリ名  \\\n",
              "0        2018-01-01     6  1000001   420     1       100           映画 - DVD   \n",
              "1        2018-01-01     0  1000017   250     1       100           映画 - DVD   \n",
              "2        2018-01-01     1  1000017   250     1       100           映画 - DVD   \n",
              "3        2018-01-01     1  1000018   250     1       100           映画 - DVD   \n",
              "4        2018-01-01     1  1000027   250     1       100           映画 - DVD   \n",
              "...             ...   ...      ...   ...   ...       ...                ...   \n",
              "1119565  2019-10-31    13  3200029  1360     1       320    ゲーム周辺機器 - ゲーム機B   \n",
              "1119566  2019-10-31    10  3300001  2040     1       330          音楽 - レコード   \n",
              "1119567  2019-10-31    15  3400002  1440     1       340    ゲーム周辺機器 - ゲーム機A   \n",
              "1119568  2019-10-31    17  3400003  1190     1       340    ゲーム周辺機器 - ゲーム機A   \n",
              "1119569  2019-10-31    13  3500004   420     1       350  本 - オーディオブック_タイプB   \n",
              "\n",
              "        campaign_name  customers  \n",
              "0          Campaign C        152  \n",
              "1          Campaign D        229  \n",
              "2          Campaign A        142  \n",
              "3          Campaign C         64  \n",
              "4          Campaign C        156  \n",
              "...               ...        ...  \n",
              "1119565    Campaign B        287  \n",
              "1119566    Campaign B         60  \n",
              "1119567    Campaign B        101  \n",
              "1119568    Campaign C        135  \n",
              "1119569    Campaign C        273  \n",
              "\n",
              "[1119570 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7dc8e164-7996-4a1c-b001-2d1cf495529c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>日付</th>\n",
              "      <th>店舗ID</th>\n",
              "      <th>商品ID</th>\n",
              "      <th>商品価格</th>\n",
              "      <th>売上個数</th>\n",
              "      <th>商品カテゴリID</th>\n",
              "      <th>商品カテゴリ名</th>\n",
              "      <th>campaign_name</th>\n",
              "      <th>customers</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>6</td>\n",
              "      <td>1000001</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign D</td>\n",
              "      <td>229</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign A</td>\n",
              "      <td>142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000018</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000027</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>156</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119565</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>13</td>\n",
              "      <td>3200029</td>\n",
              "      <td>1360</td>\n",
              "      <td>1</td>\n",
              "      <td>320</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機B</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119566</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>10</td>\n",
              "      <td>3300001</td>\n",
              "      <td>2040</td>\n",
              "      <td>1</td>\n",
              "      <td>330</td>\n",
              "      <td>音楽 - レコード</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119567</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>15</td>\n",
              "      <td>3400002</td>\n",
              "      <td>1440</td>\n",
              "      <td>1</td>\n",
              "      <td>340</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機A</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119568</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>17</td>\n",
              "      <td>3400003</td>\n",
              "      <td>1190</td>\n",
              "      <td>1</td>\n",
              "      <td>340</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機A</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>135</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119569</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>13</td>\n",
              "      <td>3500004</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>350</td>\n",
              "      <td>本 - オーディオブック_タイプB</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>273</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1119570 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7dc8e164-7996-4a1c-b001-2d1cf495529c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7dc8e164-7996-4a1c-b001-2d1cf495529c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7dc8e164-7996-4a1c-b001-2d1cf495529c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-10ce2d29-5f43-4b8f-a6f8-9db9aae29f94\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-10ce2d29-5f43-4b8f-a6f8-9db9aae29f94')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-10ce2d29-5f43-4b8f-a6f8-9db9aae29f94 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_80e1f7ec-6aa0-4866-9dfc-f305d978490f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_all')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_80e1f7ec-6aa0-4866-9dfc-f305d978490f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_all');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_all"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 仮想在庫データを追加する準備\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# 既存のデータを読み込み\n",
        "file_path = '/content/all_merged_data.csv'\n",
        "df = pd.read_csv(file_path)\n",
        "\n",
        "# 仮想の在庫データを追加\n",
        "np.random.seed(42)\n",
        "df['initial_stock'] = np.random.randint(100, 1000, size=len(df))  # 初期在庫量\n",
        "df['sales_quantity'] = np.random.randint(1, 100, size=len(df))  # 売上数量\n",
        "df['current_stock'] = df['initial_stock'] - df['sales_quantity']  # 現在在庫量\n",
        "\n",
        "# データの最初の数行を表示して確認\n",
        "df.head()\n",
        "\n",
        "# 修正したデータを保存\n",
        "modified_file_path_with_stock = '/content/all_merged_data_with_stock.csv'\n",
        "df.to_csv(modified_file_path_with_stock, index=False)\n",
        "\n",
        "modified_file_path_with_stock\n",
        "df_all_S = pd.read_csv(modified_file_path_with_stock)\n",
        "\n",
        "df_all_S"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "DQEoa1lTVq9c",
        "outputId": "4b86383a-08f1-43e6-e700-86f3b16e1942"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 日付  店舗ID     商品ID  商品価格  売上個数  商品カテゴリID            商品カテゴリ名  \\\n",
              "0        2018-01-01     6  1000001   420     1       100           映画 - DVD   \n",
              "1        2018-01-01     0  1000017   250     1       100           映画 - DVD   \n",
              "2        2018-01-01     1  1000017   250     1       100           映画 - DVD   \n",
              "3        2018-01-01     1  1000018   250     1       100           映画 - DVD   \n",
              "4        2018-01-01     1  1000027   250     1       100           映画 - DVD   \n",
              "...             ...   ...      ...   ...   ...       ...                ...   \n",
              "1119565  2019-10-31    13  3200029  1360     1       320    ゲーム周辺機器 - ゲーム機B   \n",
              "1119566  2019-10-31    10  3300001  2040     1       330          音楽 - レコード   \n",
              "1119567  2019-10-31    15  3400002  1440     1       340    ゲーム周辺機器 - ゲーム機A   \n",
              "1119568  2019-10-31    17  3400003  1190     1       340    ゲーム周辺機器 - ゲーム機A   \n",
              "1119569  2019-10-31    13  3500004   420     1       350  本 - オーディオブック_タイプB   \n",
              "\n",
              "        campaign_name  customers  initial_stock  sales_quantity  current_stock  \n",
              "0          Campaign C        152            202              12            190  \n",
              "1          Campaign D        229            535              45            490  \n",
              "2          Campaign A        142            960               5            955  \n",
              "3          Campaign C         64            370              71            299  \n",
              "4          Campaign C        156            206              99            107  \n",
              "...               ...        ...            ...             ...            ...  \n",
              "1119565    Campaign B        287            437              78            359  \n",
              "1119566    Campaign B         60            734              34            700  \n",
              "1119567    Campaign B        101            637               8            629  \n",
              "1119568    Campaign C        135            179              39            140  \n",
              "1119569    Campaign C        273            111              33             78  \n",
              "\n",
              "[1119570 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5ea38034-ddcf-4fe0-8c93-266e6fbdf696\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>日付</th>\n",
              "      <th>店舗ID</th>\n",
              "      <th>商品ID</th>\n",
              "      <th>商品価格</th>\n",
              "      <th>売上個数</th>\n",
              "      <th>商品カテゴリID</th>\n",
              "      <th>商品カテゴリ名</th>\n",
              "      <th>campaign_name</th>\n",
              "      <th>customers</th>\n",
              "      <th>initial_stock</th>\n",
              "      <th>sales_quantity</th>\n",
              "      <th>current_stock</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>6</td>\n",
              "      <td>1000001</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>152</td>\n",
              "      <td>202</td>\n",
              "      <td>12</td>\n",
              "      <td>190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>0</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign D</td>\n",
              "      <td>229</td>\n",
              "      <td>535</td>\n",
              "      <td>45</td>\n",
              "      <td>490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000017</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign A</td>\n",
              "      <td>142</td>\n",
              "      <td>960</td>\n",
              "      <td>5</td>\n",
              "      <td>955</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000018</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>64</td>\n",
              "      <td>370</td>\n",
              "      <td>71</td>\n",
              "      <td>299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>1000027</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>100</td>\n",
              "      <td>映画 - DVD</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>156</td>\n",
              "      <td>206</td>\n",
              "      <td>99</td>\n",
              "      <td>107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119565</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>13</td>\n",
              "      <td>3200029</td>\n",
              "      <td>1360</td>\n",
              "      <td>1</td>\n",
              "      <td>320</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機B</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>287</td>\n",
              "      <td>437</td>\n",
              "      <td>78</td>\n",
              "      <td>359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119566</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>10</td>\n",
              "      <td>3300001</td>\n",
              "      <td>2040</td>\n",
              "      <td>1</td>\n",
              "      <td>330</td>\n",
              "      <td>音楽 - レコード</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>60</td>\n",
              "      <td>734</td>\n",
              "      <td>34</td>\n",
              "      <td>700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119567</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>15</td>\n",
              "      <td>3400002</td>\n",
              "      <td>1440</td>\n",
              "      <td>1</td>\n",
              "      <td>340</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機A</td>\n",
              "      <td>Campaign B</td>\n",
              "      <td>101</td>\n",
              "      <td>637</td>\n",
              "      <td>8</td>\n",
              "      <td>629</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119568</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>17</td>\n",
              "      <td>3400003</td>\n",
              "      <td>1190</td>\n",
              "      <td>1</td>\n",
              "      <td>340</td>\n",
              "      <td>ゲーム周辺機器 - ゲーム機A</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>135</td>\n",
              "      <td>179</td>\n",
              "      <td>39</td>\n",
              "      <td>140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1119569</th>\n",
              "      <td>2019-10-31</td>\n",
              "      <td>13</td>\n",
              "      <td>3500004</td>\n",
              "      <td>420</td>\n",
              "      <td>1</td>\n",
              "      <td>350</td>\n",
              "      <td>本 - オーディオブック_タイプB</td>\n",
              "      <td>Campaign C</td>\n",
              "      <td>273</td>\n",
              "      <td>111</td>\n",
              "      <td>33</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1119570 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ea38034-ddcf-4fe0-8c93-266e6fbdf696')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5ea38034-ddcf-4fe0-8c93-266e6fbdf696 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5ea38034-ddcf-4fe0-8c93-266e6fbdf696');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5cb10dcd-5f2a-4b3d-b3ff-3cc6bcd83461\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5cb10dcd-5f2a-4b3d-b3ff-3cc6bcd83461')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5cb10dcd-5f2a-4b3d-b3ff-3cc6bcd83461 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8d50b679-3e56-4a5c-87ae-2a63ac18ac96\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_all_S')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8d50b679-3e56-4a5c-87ae-2a63ac18ac96 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_all_S');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_all_S"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "# 生成したCSVファイルをダウンロード\n",
        "files.download('/content/all_merged_data_with_stock.csv')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "nULhPBeaWQQo",
        "outputId": "adbeb2d3-9576-42ec-c520-3ee6abd15f4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_fa15be3b-cc63-4fbe-b258-aa8b9fa08e07\", \"all_merged_data_with_stock.csv\", 89244712)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mj5YIACnXmUP"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}